---
title: "Data Export, R, Matlab, & Python"
---

PAMGuard outputs data both to a SQL relational [database](./olhelp/utilities/generalDatabaseHelp/docs/database_database.html) and to [binary data files](./olhelp/utilities/BinaryStore/docs/binarystore_overview.html).

Users wishing to further process PAMGuard output data in a more flexible programming environment (for example, to develop or run bespoke classifiers on PAMGuard detections, or to mike nicer plots for publication), will need to read those data into their programming language of choice.

Most programming languages will be able to connect to and read the database using standard libraries. However, the binary files are in a bespoke format, which requires special software libraries to read data from those files.

Libraries are provided to read data from PAMGuard binary files written in <a href="https://www.r-project.org/" target="matlab">R</a> and <a href="https://uk.mathworks.com/products/matlab.html" target="matlab">MATLAB</a>. A <a href="https://www.python.org/" target="matlab">Python</a> library is under development. Read below how to install and use these libraries.

:::::::::: panel-tabset
## Export

:::::: columns
:::: {.column width="60%"}
::: {style="text-align: left;"}
<p style="font-weight: bold; font-size: 18px;">

Export data to other platforms

</p>
:::

PAMGuard has a powerful exporter which can quickly export detections to;

-   .mat files which can be opened in MATLAB.
-   .RData frames which can be open in R.
-   .wav file which can be opened in any acoustics program.

The exporter allows filtering of data based on, for example, species classification, manual annotations etc. allowing users to specify exactly what is exported.
::::

::: {.column width="40%"}
<img src="./images/export_dialog.png" alt="Description of image" style="border-radius: 10px; width: 75%; height: 75%"/>
:::
::::::

## R

Thanks to our friends at NOAA Southwest Fisheries Science Center in San Diego, there is a R package for opening PAMGuard binary files:

<code> install.packages("PamBinaries") </code>

You can find the source files on [GitHub](https://github.com/TaikiSan21/PamBinaries).

The best way to download and stay up-to-date with this is by following the installation instructions on the GitHub page. The R functions are written to work just like the MATLAB code, and there is a short tutorial on the GitHub page.

``` r
library(PamBinaries)

#count the number of classified clicks in a folder of pamguard files. 
#folder to a set of binary files. 

folder='my/folder/of/pamguard/click/files'

# list all the file names of the
# specified pattern
fnames <- list.files(folder, pattern = "Click_Detector_Clicks.*\\.pgdf$")

count =0; #the classified click counter. 
for (val in fnames) {
  print(val)
  
  #load each click file.
  clickfile <- loadPamguardBinaryFile(file.path(folder, val))
  
  #iterate through the click files to count the classified clicks. 
  for (aclick in clickfile$data) {
    if (aclick$type==1){
      count=count+1
    }
  }
}
```

## MATLAB

Users can also take more control and import PAMGuard data files directly in MATLAB using the PAMGuard-matlab library

MATLAB code for opening PAMGuard binary files is now on the [PAMGuard GitHub repository](https://github.com/PAMGuard/PAMGuardMatlab).

Clicking the green 'Code' button will allow you to download the code as a zip archive. Alternatively, you can clone the repository, which will make it easier to get updates if the code is updated.

``` octave
% count the number of classified clicks in a binary file folder of clicks. 

clear
% the path to the binary file foldeer
folder='/my/binary/file/folder';
 
binaryFiles = dir(fullfile(folder, 'Click_Detector_Clicks*.pgdf'));
 
count=0; 
for i=1:length(binaryFiles)
    %print progress
    disp(['Loading files: ' num2str(i) ...
        ' of ' num2str(length(binaryFiles))])

   %create filepath from dir dtruct
    filePath=fullfile(folder, binaryFiles(i).name);

    %load the clicks
    clicks=loadPamguardBinaryFile(filePath);

    %iterate through all clicks and count how many are classified 
    for j=1:length(clicks)
         if (clicks(j).type==1) 
            count=count+1;
         end
    end
end
```

## Python

PyPAMGuard is a data-processing library for PAMGuard written in Python. Access the source code on <a href='https://github.com/sullivan-james/pypamguard'>this</a> GitHub repository.

::: callout-warning
## WARNING: PyPAMGuard is still in active development.

The library is made available in an **experimental state**. The code is unstable and may not produce the results you expect. The interface and methods may change between now and the production release. To use the experimental code, you can download the source code from the GitHub repository.
:::

### Experimental Installation

::: callout-caution
## Python proficiency recommended to install and use the experimental code.
:::

To install and use PyPAMGuard, ensure you have at least got Python 3.12 installed on your MacOS, Windows or Linux system. Download the  code from the <a href='https://github.com/sullivan-james/pypamguard/releases/download/v0.0.1-alpha/pypamguard-v0.0.1-alpha.zip'>Git repository on GitHub</a> and extract the contents into your Python project or working directory. You will need to install all the dependencies listed in requirements.txt (it is recommended you do this with a <a href='https://docs.python.org/3/library/venv.html'>virtual environment</a>).

You can now process PAMGuard data files by running the code below. There are a raft of customisations that are documented in the <a href='https://sullivan-james.github.io/pypamguard/pypamguard.html'>API reference</a> and <a href='https://github.com/sullivan-james/pypamguard/blob/main/README.md'>README</a>.

``` python
import pypamguard
df = pypamguard.load_binary_data_file('path/to/data/file.pgdf')
print(df) # will print a summary of all headers, footers and data
```

The code below produced a `PGBFile` object. Attributes such as the headers, footers and data can be accessed in an object-like manner. Some examples are shown below.

``` python
df.file_header # file header
df.module_header # module header
df.module_header.version # module version
df.module_footer # module footer
df.file_footer # file footer
df.data[0] # the first module data
```

::: callout-note
### Coming Soon: Installation via `pip`

PyPAMGuard will be available to download via the Python Package Index (PyPI) once it enters a stable production phase. Installation will as simple as running `pip install pypamguard` in your command line.
:::
::::::::::
